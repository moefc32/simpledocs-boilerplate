{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"slug":2,"contents":3,"previousPage":13,"nextPage":36},"Code Snippet","code-snippet",[4,5,8,9,12],"Code snippets allow documentation to include properly formatted code examples. This element is essential for providing clear instructions, demonstrating syntax, or showcasing implementations. Instead of adding raw code as plain text, snippets are structured JSON that ensure proper rendering and formatting.",{"type":6,"value":7},"section-title","Example","Each snippet is stored as an object inside the \u003Ccode>contents\u003C/code> array of a page. The object must have a \u003Ccode>type\u003C/code> property set to \u003Ccode>code\u003C/code> and a \u003Ccode>value\u003C/code> property containing the actual code as a string. This approach keeps content structured and ensures consistency in how code is displayed.",{"type":10,"value":11},"code","{\n\"type\": \"code\",\n\"value\": \"\u003Cstringified JSON>\"\n}","The \u003Ccode>value\u003C/code> field stores the JSON code as a string, which will be converted back into a JSON object when rendered. To prevent errors, ensure the stringified JSON is properly formatted and valid. This includes escaping special characters, maintaining correct syntax, and verifying that the structure remains intact when parsed.",{"title":14,"slug":15,"contents":16},"Adding Contents","adding-contents",[17,18,20,21,23,24,25,26,28,29,30,32,35],"Adding content to Simpledocs involves structuring and organizing information in a clear and accessible manner. This ensures that documentation remains easy to navigate and understand. Simpledocs uses a single JSON file located at \u003Ccode>$lib/documentation.json\u003C/code> to store and manage all page contents, allowing for seamless updates, structured data handling, and efficient content retrieval.",{"type":6,"value":19},"Basic Concept","The JSON file follows a structured format that organizes documentation pages into sections and paragraphs. The JSON is structured as an array of objects, where each object represents a category that has a documentation page or more. Each page contains sections, and each section consists of paragraphs. Hereâ€™s an example structure, as can be seen below.",{"type":10,"value":22},"[\n{\n\"name\": \"Category Name\",\n\"pages\": [\n{\n\"title\": \"Page Name\",\n\"slug\": \"page-slug\",\n\"contents\": []\n}\n]\n}\n]","In Simpledocs, the JSON structure organizes documentation into categories, pages, and contents for a clear and structured navigation system. The top level is an array where each object represents a category, acting as a container for related pages. The \u003Ccode>name\u003C/code> property defines the category title, which helps in grouping documentation topics logically.","Each category contains a \u003Ccode>pages\u003C/code> array that holds individual documentation pages. Every page has a \u003Ccode>title\u003C/code> for display, a \u003Ccode>slug\u003C/code> for unique identification in URLs, and a \u003Ccode>contents\u003C/code> array that stores all structured information for that page. The \u003Ccode>contents\u003C/code> array will later hold sections, paragraphs, or other content elements that make up the documentation. This structured approach ensures easy content management, making it simple to organize, retrieve, and update documentation.","Now, let's try to add a paragraph to the example page.",{"type":10,"value":27},"[\n{\n\"name\": \"Category Name\",\n\"pages\": [\n{\n\"title\": \"Page Name\",\n\"slug\": \"page-slug\",\n\"contents\": [\n\"Here goes a paragraph content.\"\n]\n}\n]\n}\n]","In the structure above, the page now contains a single paragraph. To add more paragraphs, simply append additional strings to the array. This keeps the documentation flexible and easy to update without modifying the overall structure.","Now how about adding a page section? By adding a page section, it can help us in grouping and organizing different contexts inside a page. So letâ€™s try adding one, followed by another paragraph.",{"type":10,"value":31},"[\n{\n\"name\": \"Category Name\",\n\"pages\": [\n{\n\"title\": \"Page Name\",\n\"slug\": \"page-slug\",\n\"contents\": [\n\"Here goes a paragraph content.\",\n{\n\"type\": \"section-title\",\n\"value\": \"This is a Section Title\"\n},\n\"Here goes the second paragraph.\"\n]\n}\n]\n}\n]",{"type":33,"value":34},"paragraph","Lorem ipsum dolor sit, amet consectetur adipisicing elit. Perferendis neque voluptatum repudiandae hic dolore tenetur rem atque aliquam sint deleniti quod, veniam amet, nemo iusto excepturi velit eum? Aut, magni praesentium totam eos maiores accusamus nihil a pariatur!","Notice that a page section is not a string but an object. This object consists of \u003Ccode>type\u003C/code> and \u003Ccode>value\u003C/code>, which define its type as a section title and what text it will display on the page. We will discover more variations of these types in the next parts.",{"title":37,"slug":38,"contents":39},"Download Button","download-button",[40,41,42,43,44,48,50,52,54,56,58,60,62,64],"A download button provides a way to link files for users to download directly from the documentation. This can be useful for sharing resources such as PDFs, software packages, templates, or any other downloadable content. Instead of manually adding links, the button is structured as an object to maintain consistency and ease of customization.",{"type":6,"value":7},"Each download button is stored as an object inside the \u003Ccode>contents\u003C/code> array of a page. The object must have a \u003Ccode>type\u003C/code> property, a \u003Ccode>label\u003C/code> that defines the button text, and a \u003Ccode>target\u003C/code> that specifies the file path or URL.","Different variations of the download button can be used to indicate the nature of the provided file. The \u003Ccode>type\u003C/code> property supports multiple values for styling and context. Using \u003Ccode>download\u003C/code> creates a standard button, while \u003Ccode>download-info\u003C/code>, \u003Ccode>download-success\u003C/code>, \u003Ccode>download-warning\u003C/code>, and \u003Ccode>download-danger\u003C/code> apply different visual styles to convey additional meaning. These variations help users distinguish between general downloads, informational resources, successful actions, warnings, or potentially critical files.",{"type":45,"label":46,"target":47},"download","Download Example","/docs/bridge.webp",{"type":10,"value":49},"{\n\"type\": \"download\",\n\"label\": \"\u003Clabel for download button>\",\n\"target\": \"\u003Cpath to file>\"\n}",{"type":51,"label":46,"target":47},"download-info",{"type":10,"value":53},"{\n\"type\": \"download-info\",\n\"label\": \"\u003Clabel for download-info button>\",\n\"target\": \"\u003Cpath to file>\"\n}",{"type":55,"label":46,"target":47},"download-success",{"type":10,"value":57},"{\n\"type\": \"download-success\",\n\"label\": \"\u003Clabel for download-success button>\",\n\"target\": \"\u003Cpath to file>\"\n}",{"type":59,"label":46,"target":47},"download-warning",{"type":10,"value":61},"{\n\"type\": \"download-warning\",\n\"label\": \"\u003Clabel for download-warning button>\",\n\"target\": \"\u003Cpath to file>\"\n}",{"type":63,"label":46,"target":47},"download-danger",{"type":10,"value":65},"{\n\"type\": \"download-danger\",\n\"label\": \"\u003Clabel for download-danger button>\",\n\"target\": \"\u003Cpath to file>\"\n}"],"uses":{"params":["slug"]}}]}
